// ==UserScript==
// @name         AO3 Word Replacer
// @version      1.0
// @description  Replace words in AO3 fanfictions with custom alternatives
// @author       You
// @match        https://archiveofourown.org/works/*
// @match        https://archiveofourown.org/chapters/*
// @updateURL    https://raw.githubusercontent.com/micc4553/AO3-Scripts/refs/heads/main/Word%20Replacer
// @downloadURL  https://raw.githubusercontent.com/micc4553/AO3-Scripts/refs/heads/main/Word%20Replacer
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Storage key for replacements
    const STORAGE_KEY = 'ao3_word_replacements';

    // Load saved replacements from localStorage
    function loadReplacements() {
        const saved = localStorage.getItem(STORAGE_KEY);
        return saved ? JSON.parse(saved) : {};
    }

    // Save replacements to localStorage
    function saveReplacements(replacements) {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(replacements));
    }

    // Create the control panel UI
    function createControlPanel() {
        const panel = document.createElement('div');
        panel.id = 'word-replacer-panel';
        panel.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 300px;
            background: #fff;
            border: 2px solid #232136;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'GNU Unifont', Verdana, Helvetica, sans-serif;
            font-size: 13px;
            display: none;
        `;

        panel.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h3 style="margin: 0; color: #232136;">Word Replacer</h3>
                <button id="close-panel" style="border: none; font-size: 18px; cursor: pointer;">×</button>
            </div>
            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: #666;">Replace:</label>
                <input type="text" id="original-word" placeholder="original word" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 3px;">
                <label style="display: block; margin-bottom: 5px; color: #666">With:</label>
                <input type="text" id="replacement-word" placeholder="replacement word" style="width: 100%; padding: 5px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 3px;">
                <button id="add-replacement" style="border: none; padding: 8px 15px; border-radius: 3px; cursor: pointer;">Add Replacement</button>
            </div>
            <div id="replacement-list" style="max-height: 200px; overflow-y: auto; margin-bottom: 15px;"></div>
            <div style="text-align: center;">
                <button id="apply-replacements" style="background: #006600; color: white; border: none; padding: 10px 20px; border-radius: 3px; cursor: pointer; margin-right: 10px;">Apply All</button>
                <button id="reset-text" style="background: #666; color: white; border: none; padding: 10px 20px; border-radius: 3px; cursor: pointer;">Reset Text</button>
            </div>
        `;

        document.body.appendChild(panel);
        return panel;
    }

    // Create toggle button
    function createToggleButton() {
        const button = document.createElement('button');
        button.id = 'word-replacer-toggle';
        button.textContent = 'Word Replacer';
        button.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            z-index: 9999;
            font-family: 'Lucida Grande', 'Lucida Sans Unicode', 'GNU Unifont', Verdana, Helvetica, sans-serif;
            font-size: 12px;
            transform: translateZ(0);
            will-change: transform;
        `;

      document.body.style.position = 'relative';
      document.body.appendChild(button);
        return button;
    }

    // Update the replacement list display
    function updateReplacementList() {
        const listContainer = document.getElementById('replacement-list');
        const replacements = loadReplacements();

        listContainer.innerHTML = '';

        Object.entries(replacements).forEach(([original, replacement]) => {
            const item = document.createElement('div');
            item.style.cssText = `
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 5px;
                margin-bottom: 5px;
                border-radius: 3px;
                color: #666;
            `;

            item.innerHTML = `
                <span style="font-size: 12px;">"${original}" → "${replacement}"</span>
                <button class="remove-replacement" data-original="${original}" style="border: none; padding: 2px 6px; border-radius: 2px; cursor: pointer; font-size: 11px;">×</button>
            `;

            listContainer.appendChild(item);
        });
    }

    // Store original text for reset functionality
    let originalText = '';

    // Apply replacements to the text
    function applyReplacements() {
        const workText = document.querySelector('#workskin, .userstuff');
        if (!workText) return;

        // Store original text if not already stored
        if (!originalText) {
            originalText = workText.innerHTML;
        }

        const replacements = loadReplacements();
        let currentHTML = originalText;

        // Apply each replacement
        Object.entries(replacements).forEach(([original, replacement]) => {
            // Create a regex that matches whole words (case-insensitive)
            // but preserves the original case pattern
            const regex = new RegExp(`\\b${escapeRegex(original)}\\b`, 'gi');

            currentHTML = currentHTML.replace(regex, (match) => {
                // Preserve case: if original match was uppercase, make replacement uppercase, etc.
                if (match === match.toUpperCase()) {
                    return replacement.toUpperCase();
                } else if (match === match.toLowerCase()) {
                    return replacement.toLowerCase();
                } else if (match.charAt(0) === match.charAt(0).toUpperCase()) {
                    return replacement.charAt(0).toUpperCase() + replacement.slice(1).toLowerCase();
                }
                return replacement;
            });
        });

        workText.innerHTML = currentHTML;
    }

    // Reset text to original
    function resetText() {
        const workText = document.querySelector('#workskin, .userstuff');
        if (!workText || !originalText) return;

        workText.innerHTML = originalText;
    }

    // Escape special regex characters
    function escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    // Initialize the script
    function init() {
        // Only run on work pages (not index pages)
        if (!document.querySelector('#workskin, .userstuff')) return;

        const toggleButton = createToggleButton();
        const panel = createControlPanel();

        // Toggle panel visibility
        toggleButton.addEventListener('click', () => {
            const isVisible = panel.style.display !== 'none';
            panel.style.display = isVisible ? 'none' : 'block';
            if (!isVisible) {
                updateReplacementList();
            }
        });

        // Close panel
        document.getElementById('close-panel').addEventListener('click', () => {
            panel.style.display = 'none';
        });

        // Add replacement
        document.getElementById('add-replacement').addEventListener('click', () => {
            const originalInput = document.getElementById('original-word');
            const replacementInput = document.getElementById('replacement-word');

            const original = originalInput.value.trim();
            const replacement = replacementInput.value.trim();

            if (original && replacement) {
                const replacements = loadReplacements();
                replacements[original] = replacement;
                saveReplacements(replacements);

                originalInput.value = '';
                replacementInput.value = '';
                updateReplacementList();
            }
        });

        // Remove replacement (event delegation)
        document.getElementById('replacement-list').addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-replacement')) {
                const original = e.target.getAttribute('data-original');
                const replacements = loadReplacements();
                delete replacements[original];
                saveReplacements(replacements);
                updateReplacementList();
            }
        });

        // Apply replacements
        document.getElementById('apply-replacements').addEventListener('click', applyReplacements);

        // Reset text
        document.getElementById('reset-text').addEventListener('click', resetText);

        // Allow Enter key to add replacements
        ['original-word', 'replacement-word'].forEach(id => {
            document.getElementById(id).addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    document.getElementById('add-replacement').click();
                }
            });
        });
    }

    // Wait for page to load completely
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
})();
