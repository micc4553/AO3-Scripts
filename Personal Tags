// ==UserScript==
// @name         AO3 Personal Tags
// @version      1.2.1
// @description  Add personal tags to AO3 works with customizable links
// @match        https://archiveofourown.org/*
// @icon         https://archiveofourown.org/favicon.ico
// @updateURL    https://raw.githubusercontent.com/micc4553/AO3-Scripts/refs/heads/main/Personal%20Tags
// @downloadURL  https://raw.githubusercontent.com/micc4553/AO3-Scripts/refs/heads/main/Personal%20Tags
// ==/UserScript==

(function() {
    'use strict';

    // Shared storage keys
    var KEYS = {
        PERSONAL_TAGS: "ao3_personal_tags",
        TAG_LOOKUP: "ao3_tag_lookup",
        TAG_LINKS: "ao3_tag_links"
    };

    function isValidWorkId(id) {
        if (!id || typeof id !== "string") return false;
        if (id.indexOf('null') !== -1 || id.indexOf('undefined') !== -1 || id.indexOf('NaN') !== -1) return false;
        if (id.trim() === '' || id.length > 8) return false;
        return /^\d+$/.test(id);
    }

    // Storage functions
    function getPersonalTags(workId) {
        var tags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
        return tags[workId] || [];
    }

    function savePersonalTags(workId, tags) {
        if (!isValidWorkId(workId)) return;
        var allTags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
        allTags[workId] = tags;
        localStorage.setItem(KEYS.PERSONAL_TAGS, JSON.stringify(allTags));
    }

    function getTagLookup() {
        return JSON.parse(localStorage.getItem(KEYS.TAG_LOOKUP) || '{}');
    }

    function saveTagLookup(tagLookup) {
        localStorage.setItem(KEYS.TAG_LOOKUP, JSON.stringify(tagLookup));
    }

    function getTagLinks() {
        return JSON.parse(localStorage.getItem(KEYS.TAG_LINKS) || '{}');
    }

    function saveTagLinks(tagLinks) {
        localStorage.setItem(KEYS.TAG_LINKS, JSON.stringify(tagLinks));
    }

    function getTagLink(tag) {
        var normalizedTag = normalizeTag(tag);
        var tagLinks = getTagLinks();
        return tagLinks[normalizedTag] || 'https://archiveofourown.org/tags/' + encodeURIComponent(tag) + '/works';
    }

    function setTagLink(tag, link) {
        var normalizedTag = normalizeTag(tag);
        var tagLinks = getTagLinks();
        tagLinks[normalizedTag] = link;
        saveTagLinks(tagLinks);
    }

    function normalizeTag(tag) {
        return tag.toLowerCase().trim();
    }

    function capitalizeTag(tag) {
        return tag.split(' ').map(function(word) {
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }).join(' ');
    }

    function addWorkToTag(tag, workInfo) {
        var normalizedTag = normalizeTag(tag);
        var tagLookup = getTagLookup();
        if (!tagLookup[normalizedTag]) {
            tagLookup[normalizedTag] = {};
        }
        tagLookup[normalizedTag][workInfo.id] = {
            title: workInfo.title,
            author: workInfo.author,
            summary: workInfo.summary || '',
            originalTag: tag
        };
        saveTagLookup(tagLookup);
    }

    function removeWorkFromTag(tag, workId) {
        var normalizedTag = normalizeTag(tag);
        var tagLookup = getTagLookup();
        if (tagLookup[normalizedTag]) {
            delete tagLookup[normalizedTag][workId];
            if (Object.keys(tagLookup[normalizedTag]).length === 0) {
                delete tagLookup[normalizedTag];
            }
            saveTagLookup(tagLookup);
        }
    }

    function getWorkInfo() {
        var match = window.location.pathname.match(/\/works\/(\d+)/);
        var workId = match ? match[1] : null;
        if (!workId || !isValidWorkId(workId)) return null;

        var titleElement = document.querySelector('.title.heading');
        var title = titleElement ? titleElement.textContent.trim() : '';

        var authorElement = document.querySelector('.byline.heading a[rel="author"]');
        var author = authorElement ? authorElement.textContent.trim() : '';

        var summaryElement = document.querySelector('.summary blockquote');
        var summary = summaryElement ? summaryElement.textContent.trim() : '';

        return { id: workId, title: title, author: author, summary: summary };
    }

    function showLinkEditor(tag, callback) {
        var existingModal = document.querySelector('#link-editor-modal');
        if (existingModal) existingModal.remove();

        var overlay = document.createElement('div');
        overlay.id = 'link-editor-modal';
        overlay.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;';

        var modal = document.createElement('div');
        modal.style.cssText = 'background: #232136CC; color: #FFF; padding: 20px; border: 1.5px solid #999; border-radius: 6px; max-width: 500px; width: 90%; box-shadow: 0 0 10px rgba(0,0,0,0.5); font-family: sans-serif;';

        modal.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        var header = document.createElement('h3');
        header.style.cssText = 'margin: 0 0 15px 0; font-size: 1.1em;';
        header.textContent = 'Edit Link for "' + tag + '"';
        modal.appendChild(header);

        var input = document.createElement('input');
        input.type = 'url';
        input.value = getTagLink(tag);
        input.placeholder = 'Enter URL...';
        input.style.cssText = 'width: 100%; padding: 8px; margin-bottom: 15px; border: 1px solid #999; border-radius: 3px; background: #2A273F; color: #FFF; box-sizing: border-box;';
        modal.appendChild(input);

        var buttonsContainer = document.createElement('div');
        buttonsContainer.style.cssText = 'display: flex; gap: 10px; justify-content: flex-end;';
        modal.appendChild(buttonsContainer);

        var saveButton = document.createElement('button');
        saveButton.textContent = 'Save';
        saveButton.style.cssText = 'padding: 6px 12px; border: none; border-radius: 3px; background: #46446C; color: #FFF; cursor: pointer;';
        saveButton.addEventListener('click', function() {
            var newLink = input.value.trim();
            if (newLink) {
                setTagLink(tag, newLink);
                if (callback) callback();
            }
            overlay.remove();
        });
        buttonsContainer.appendChild(saveButton);

        var cancelButton = document.createElement('button');
        cancelButton.textContent = 'Cancel';
        cancelButton.style.cssText = 'padding: 6px 12px; border: 1px solid #999; border-radius: 3px; background: transparent; color: #FFF; cursor: pointer;';
        cancelButton.addEventListener('click', function() {
            overlay.remove();
        });
        buttonsContainer.appendChild(cancelButton);

        var resetButton = document.createElement('button');
        resetButton.textContent = 'Reset to Default';
        resetButton.style.cssText = 'padding: 6px 12px; border: 1px solid #999; border-radius: 3px; background: transparent; color: #FFF; cursor: pointer;';
        resetButton.addEventListener('click', function() {
            var defaultLink = 'https://archiveofourown.org/tags/' + encodeURIComponent(tag) + '/works';
            input.value = defaultLink;
        });
        buttonsContainer.appendChild(resetButton);

        overlay.appendChild(modal);

        overlay.addEventListener('click', function() {
            overlay.remove();
        });

        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                saveButton.click();
            }
        });

        document.body.appendChild(overlay);
        input.focus();
        input.select();
    }

    function createTagManager(workInfo) {
        var container = document.createElement('div');
        container.classList.add('personal-tags-container');
        container.style.cssText = 'margin: 15px 0; padding: 10px; border: 1.5px solid #999; border-radius: 5px; position: relative; max-width: 580px; margin-left: auto; margin-right: auto;';

        var header = document.createElement('div');
        header.style.cssText = 'font-weight: bold; margin-bottom: 10px; border-bottom: 1px solid #ccc; padding-bottom: 8px;';
        header.textContent = '📌 Personal Tags';
        container.appendChild(header);

        var tagsDisplay = document.createElement('div');
        tagsDisplay.style.cssText = 'margin: 10px 0;';
        container.appendChild(tagsDisplay);

        var inputContainer = document.createElement('div');
        inputContainer.style.cssText = 'display: flex; gap: 5px; margin-top: 10px;';
        container.appendChild(inputContainer);

        var tagInput = document.createElement('input');
        tagInput.type = 'text';
        tagInput.placeholder = 'Add tag...';
        tagInput.style.cssText = 'flex: 1; padding: 5px; border: 1px solid #ccc; border-radius: 3px;';
        inputContainer.appendChild(tagInput);

        var addButton = document.createElement('button');
        addButton.textContent = 'Add Tag';
        addButton.style.cssText = 'padding: 5px 10px; border: none; border-radius: 3px; cursor: pointer;';
        inputContainer.appendChild(addButton);

        var suggestionBox = document.createElement('div');
        suggestionBox.style.cssText = 'position: absolute; top: 100%; left: 0; width: 100%; background: #2A273F; border: 1px solid #999; border-radius: 3px; max-height: 150px; overflow-y: auto; z-index: 1000; display: none;';
        container.appendChild(suggestionBox);

        function getAllUsedTags() {
            var allTags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
            var tagsArray = [];
            var workTags, i, j;
            for (var workId in allTags) {
                workTags = allTags[workId];
                for (i = 0; i < workTags.length; i++) {
                    if (tagsArray.indexOf(workTags[i]) === -1) {
                        tagsArray.push(workTags[i]);
                    }
                }
            }
            return tagsArray.sort();
        }

        function updateTagsDisplay() {
            var tags = getPersonalTags(workInfo.id);
            if (!tags.length) {
                tagsDisplay.innerHTML = '<em style="color: #999;">No personal tags yet</em>';
                return;
            }

            var html = '';
            for (var i = 0; i < tags.length; i++) {
                html += '<span style="display: inline-block; margin: 2px; padding: 3px 8px; border: 1px solid #999; border-radius: 3px; font-size: 0.9em; background-color: #2A273F;">' +
                    tags[i] +
                    '<button data-tag="' + tags[i] + '" style="margin-left: 5px; background: none; border: none; cursor: pointer; font-weight: bold;" title="Remove tag">×</button>' +
                '</span>';
            }
            tagsDisplay.innerHTML = html;

            var buttons = tagsDisplay.querySelectorAll('button');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].addEventListener('click', function() {
                    var tagToDelete = this.dataset.tag;
                    var currentTags = getPersonalTags(workInfo.id);
                    var newTags = [];
                    for (var j = 0; j < currentTags.length; j++) {
                        if (currentTags[j] !== tagToDelete) {
                            newTags.push(currentTags[j]);
                        }
                    }
                    savePersonalTags(workInfo.id, newTags);
                    removeWorkFromTag(tagToDelete, workInfo.id);
                    updateTagsDisplay();
                });
            }
        }

        function addTag() {
            var newTag = tagInput.value.trim();
            if (!newTag) return;

            var currentTags = getPersonalTags(workInfo.id);
            if (currentTags.indexOf(newTag) === -1) {
                currentTags.push(newTag);
                savePersonalTags(workInfo.id, currentTags);
                addWorkToTag(newTag, workInfo);
            }

            tagInput.value = '';
            updateTagsDisplay();
            suggestionBox.style.display = 'none';
        }

        addButton.addEventListener('click', addTag);

        var selectedIndex = -1;

        tagInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                var suggestions = suggestionBox.querySelectorAll('.suggestion-item');
                if (selectedIndex >= 0 && suggestions[selectedIndex]) {
                    suggestions[selectedIndex].click();
                } else {
                    addTag();
                }
            }
        });

        tagInput.addEventListener('input', function() {
            var query = tagInput.value.toLowerCase();
            var usedTags = getAllUsedTags();
            var filteredTags = [];

            for (var i = 0; i < usedTags.length; i++) {
                if (usedTags[i].toLowerCase().indexOf(query) === 0 && usedTags[i].toLowerCase() !== query) {
                    filteredTags.push(usedTags[i]);
                }
            }

            selectedIndex = -1;

            if (query && filteredTags.length) {
                suggestionBox.innerHTML = '';
                for (var i = 0; i < filteredTags.length; i++) {
                    var item = document.createElement('div');
                    item.textContent = filteredTags[i];
                    item.className = 'suggestion-item';
                    item.dataset.index = i;
                    item.style.cssText = 'padding: 5px 10px; cursor: pointer;';

                    item.addEventListener('mouseover', function() {
                        var suggestions = suggestionBox.querySelectorAll('.suggestion-item');
                        for (var j = 0; j < suggestions.length; j++) {
                            suggestions[j].style.background = '#2A273F';
                        }
                        this.style.background = '#46446C';
                        selectedIndex = parseInt(this.dataset.index);
                    });

                    item.addEventListener('mouseleave', function() {
                        this.style.background = '#2A273F';
                        selectedIndex = -1;
                    });

                    (function(tag) {
                        item.addEventListener('click', function() {
                            var currentTags = getPersonalTags(workInfo.id);
                            if (currentTags.indexOf(tag) === -1) {
                                currentTags.push(tag);
                                savePersonalTags(workInfo.id, currentTags);
                                addWorkToTag(tag, workInfo);
                                updateTagsDisplay();
                            }

                            tagInput.value = '';
                            suggestionBox.style.display = 'none';
                            selectedIndex = -1;
                            tagInput.focus();
                        });
                    })(filteredTags[i]);

                    suggestionBox.appendChild(item);
                }
                suggestionBox.style.display = 'block';
            } else {
                suggestionBox.style.display = 'none';
                selectedIndex = -1;
            }
        });

        tagInput.addEventListener('keydown', function(e) {
            var suggestions = suggestionBox.querySelectorAll('.suggestion-item');

            if (suggestions.length === 0) return;

            if (e.key === 'ArrowDown') {
                e.preventDefault();
                selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
                updateSelection(suggestions);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                selectedIndex = Math.max(selectedIndex - 1, -1);
                updateSelection(suggestions);
            } else if (e.key === 'Escape') {
                suggestionBox.style.display = 'none';
                selectedIndex = -1;
            }
        });

        function updateSelection(suggestions) {
            for (var i = 0; i < suggestions.length; i++) {
                if (i === selectedIndex) {
                    suggestions[i].style.background = '#46446C';
                } else {
                    suggestions[i].style.background = '#2A273F';
                }
            }
        }

        tagInput.addEventListener('blur', function() {
            setTimeout(function() {
                suggestionBox.style.display = 'none';
                selectedIndex = -1;
            }, 100);
        });

        updateTagsDisplay();
        return container;
    }

    function addTagsToWorkPage() {
        var workInfo = getWorkInfo();
        if (!workInfo) return;

        var workMeta = document.querySelector('.work.meta') || document.querySelector('dl.work.meta.group');
        if (!workMeta) return;

        var tagManager = createTagManager(workInfo);
        workMeta.parentElement.insertBefore(tagManager, workMeta.nextSibling);
    }

function addPersonalWorksToTagPage() {
    try {
        var currentUrl = window.location.href;
        var match = window.location.pathname.match(/\/tags\/([^\/]+)/);
        var currentTag = match ? decodeURIComponent(match[1]) : '';
        if (!currentTag) return;

        var tagLookup = getTagLookup();
        var tagLinks = getTagLinks();

        console.log('Current URL:', currentUrl);
        console.log('Current tag:', currentTag);

        // Find all tags that should be displayed on this page
        var tagsToShow = [];

        // Check if this is a direct tag match
        var normalizedCurrentTag = normalizeTag(currentTag.replace(/%20/g, ' ').replace(/_/g, ' '));
        if (tagLookup[normalizedCurrentTag]) {
            var defaultLink = 'https://archiveofourown.org/tags/' + encodeURIComponent(currentTag.replace(/%20/g, ' ').replace(/_/g, ' ')) + '/works';
            var tagHasCustomLink = tagLinks[normalizedCurrentTag] && tagLinks[normalizedCurrentTag] !== defaultLink;

            tagsToShow.push({
                normalizedTag: normalizedCurrentTag,
                displayName: capitalizeTag(currentTag.replace(/%20/g, ' ').replace(/_/g, ' ')),
                works: tagLookup[normalizedCurrentTag],
                hasCustomLink: tagHasCustomLink,
                isDirect: true
            });
        }

        // Check for tags with custom links pointing to this page
        for (var normalizedTag in tagLinks) {
            var customLink = tagLinks[normalizedTag];

            var urlsMatch = customLink === currentUrl ||
                           customLink === window.location.href ||
                           customLink === (window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search) ||
                           customLink === (window.location.protocol + '//' + window.location.host + window.location.pathname);

            if (urlsMatch && tagLookup[normalizedTag]) {
                // Check if we already added this tag
                var alreadyAdded = false;
                for (var i = 0; i < tagsToShow.length; i++) {
                    if (tagsToShow[i].normalizedTag === normalizedTag) {
                        alreadyAdded = true;
                        break;
                    }
                }

                if (!alreadyAdded) {
                    var works = tagLookup[normalizedTag];
                    var workIds = Object.keys(works);
                    var firstWork = workIds.length > 0 ? works[workIds[0]] : null;
                    var originalTagName = firstWork ? firstWork.originalTag : capitalizeTag(normalizedTag);

                    tagsToShow.push({
                        normalizedTag: normalizedTag,
                        displayName: originalTagName,
                        works: works,
                        hasCustomLink: true,
                        isDirect: false
                    });
                }
            }
        }

        console.log('Tags to show:', tagsToShow);

        if (tagsToShow.length === 0) {
            console.log('No tags to show');
            return;
        }

        // Wait for page to load, then insert our content
        setTimeout(function() {
            // Find the works list
            var worksList = document.querySelector('ol.work.index.group') ||
                           document.querySelector('#main ol.index.group') ||
                           document.querySelector('#main .index.group') ||
                           document.querySelector('ol.work.index');

            if (!worksList) {
                console.log('Works list not found');
                return;
            }

            // Remove existing personal tags section if it exists
            var existingSection = document.querySelector('#personal-tags-section');
            if (existingSection) {
                existingSection.remove();
            }

            // Create main container for all personal tag sections
            var mainContainer = document.createElement('div');
            mainContainer.id = 'personal-tags-section';
            mainContainer.style.cssText = 'margin: 15px 0;';

            // Create each tag section
            for (var i = 0; i < tagsToShow.length; i++) {
                var tagInfo = tagsToShow[i];

                // Create section container - using the simpler GitHub styling
                var section = document.createElement('div');
                section.style.cssText = 'margin: 15px 0; padding: 5px; border: 1px solid; border-radius: 5px; overflow: hidden;';

                // Create section header
                var header = document.createElement('h4');
                header.style.cssText = 'margin: 0; padding: 10px; cursor: pointer; display: flex; justify-content: space-between; align-items: center;';

                var headerText = document.createElement('span');
                headerText.textContent = '📌 Your Personal "' + tagInfo.displayName + '" Tags';

                var toggleIndicator = document.createElement('span');
                toggleIndicator.textContent = '▼';
                toggleIndicator.style.cssText = 'font-size: 0.8em; transition: transform 0.2s; transform: rotate(-90deg);';

                header.appendChild(headerText);
                header.appendChild(toggleIndicator);

                // Create content container (initially collapsed) - using simpler GitHub styling
                var content = document.createElement('div');
                content.style.cssText = 'padding: 0 10px; max-height: 0; overflow: hidden; transition: max-height 0.3s ease, padding 0.3s ease;';

                // Create works list
                var worksContainer = document.createElement('div');
                worksContainer.style.cssText = 'margin: 15px 0;';

                var works = tagInfo.works;
                var workIds = Object.keys(works);

                if (workIds.length === 0) {
                    worksContainer.innerHTML = '<div style="padding: 15px; color: #999; font-style: italic; text-align: center;">No works found for this tag.</div>';
                } else {
                    for (var j = 0; j < workIds.length; j++) {
                        var workId = workIds[j];
                        var work = works[workId];

                        var workItem = document.createElement('div');
                        workItem.style.cssText = 'margin: 10px 0; padding: 8px; border-left: 3px solid;';

                        workItem.innerHTML = '<h4 style="margin: 0 0 5px 0;"><a href="/works/' + workId + '">' + (work.title || 'Untitled Work') + '</a></h4>' +
                            (work.author && work.author.trim() ? '<p style="margin: 0; color: #999; font-size: 0.9em;">by ' + work.author + '</p>' : '') +
                            (work.summary && work.summary.trim() ? '<p style="margin: 5px 0 0 0; font-size: 0.85em;">' + (work.summary.length > 250 ? work.summary.substring(0, 250) + '...' : work.summary) + '</p>' : '');

                        worksContainer.appendChild(workItem);
                    }
                }

                content.appendChild(worksContainer);

                // Set up toggle functionality
                var isExpanded = false;
                (function(contentEl, indicator) {
                    header.addEventListener('click', function() {
                        if (isExpanded) {
                            contentEl.style.maxHeight = '0';
                            contentEl.style.padding = '0 10px';
                            indicator.style.transform = 'rotate(-90deg)';
                            isExpanded = false;
                        } else {
                            contentEl.style.maxHeight = contentEl.scrollHeight + 'px';
                            contentEl.style.padding = '15px';
                            indicator.style.transform = 'rotate(0deg)';
                            isExpanded = true;
                        }
                    });
                })(content, toggleIndicator);

                // Assemble the section
                section.appendChild(header);
                section.appendChild(content);
                mainContainer.appendChild(section);
            }

            // Insert the main container before the works list
            try {
                var parentElement = worksList.parentElement;
                if (parentElement) {
                    parentElement.insertBefore(mainContainer, worksList);
                    console.log('Personal tags sections inserted successfully');
                } else {
                    console.log('Could not find parent element for works list');
                }
            } catch (error) {
                console.error('Error inserting personal tags sections:', error);
                // Fallback: try to append to a common container
                var mainContent = document.querySelector('#main') || document.querySelector('.content');
                if (mainContent) {
                    mainContent.insertBefore(mainContainer, mainContent.firstChild);
                }
            }

        }, 500);

    } catch (error) {
        console.error('Error in addPersonalWorksToTagPage:', error);
    }
}

    function showPersonalTagsModal() {
        var allTags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
        var tagsArray = [];

        for (var workId in allTags) {
            var workTags = allTags[workId];
            for (var i = 0; i < workTags.length; i++) {
                if (tagsArray.indexOf(workTags[i]) === -1) {
                    tagsArray.push(workTags[i]);
                }
            }
        }
        var sortedTags = tagsArray.sort();

        if (sortedTags.length === 0) {
            alert('No personal tags found.');
            return;
        }

        var existingModal = document.querySelector('#personal-tags-modal');
        if (existingModal) existingModal.remove();

        var overlay = document.createElement('div');
        overlay.id = 'personal-tags-modal';
        overlay.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 9999;';

        overlay.addEventListener('click', function() {
            overlay.remove();
        });

        var modal = document.createElement('div');
        modal.style.cssText = 'background: #232136CC; color: #FFF; padding: 20px; border: 1.5px solid #999; border-radius: 6px; max-width: 600px; width: 90%; max-height: 80%; overflow-y: auto; box-shadow: 0 0 10px rgba(0,0,0,0.5); position: relative; font-family: sans-serif;';

        modal.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        overlay.appendChild(modal);

        var header = document.createElement('div');
        header.style.cssText = 'font-weight: bold; font-size: 1.2em; margin-bottom: 15px; border-bottom: 1px solid #555; padding-bottom: 8px;';
        header.textContent = '📌 Your Personal Tags';
        modal.appendChild(header);

        var content = document.createElement('div');
        content.style.cssText = 'display: flex; flex-wrap: wrap; gap: 8px; margin-top: 10px;';

        for (var i = 0; i < sortedTags.length; i++) {
            var tag = sortedTags[i];
            var tagContainer = document.createElement('div');
            tagContainer.style.cssText = 'display: inline-flex; align-items: center; padding: 4px 8px; background: #44415a40; border-radius: 4px; gap: 6px; transition: background-color 0.2s;';

            var tagEl = document.createElement('a');
            tagEl.textContent = tag;
            tagEl.href = getTagLink(tag);
            tagEl.target = '_blank';
            tagEl.style.cssText = 'cursor: pointer; font-size: 0.95em; text-decoration: none; color: inherit; transition: color 0.2s;';

            var editButton = document.createElement('button');
            editButton.innerHTML = '⚙️';
            editButton.title = 'Edit custom link for "' + tag + '"';
            editButton.style.cssText = 'background: none; border: none; color: #bbb; cursor: pointer; font-size: 12px; padding: 2px; line-height: 1; transition: all 0.2s;';

            editButton.addEventListener('mouseenter', function() {
                this.style.color = '#fff';
                this.style.transform = 'scale(1.1)';
            });

            editButton.addEventListener('mouseleave', function() {
                this.style.color = '#bbb';
                this.style.transform = 'scale(1)';
            });

            (function(tagName, linkElement) {
                editButton.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    showLinkEditor(tagName, function() {
                        linkElement.href = getTagLink(tagName);
                    });
                });
            })(tag, tagEl);

            tagContainer.appendChild(tagEl);
            tagContainer.appendChild(editButton);

            tagContainer.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#232136CC';
            });

            tagContainer.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '#44415a40';
            });

            content.appendChild(tagContainer);
        }
        modal.appendChild(content);

        document.body.appendChild(overlay);
    }

    function addPersonalTagsButton() {
        var nav = document.querySelector("ul.primary.navigation.actions") ||
                 document.querySelector("ul.primary.navigation") ||
                 document.querySelector("nav ul");

        if (!nav) return;
        if (document.querySelector("#personal-tags-btn")) return;

        var personalTagsLi = document.createElement("li");
        personalTagsLi.innerHTML = '<a href="#" id="personal-tags-btn">Personal Tags</a>';
        nav.appendChild(personalTagsLi);

        personalTagsLi.querySelector("a").addEventListener("click", function(e) {
            e.preventDefault();
            showPersonalTagsModal();
        });
    }

    function init() {
        var path = window.location.pathname;

        if (path.match(/\/works\/\d+/)) {
            addTagsToWorkPage();
        } else if (path.match(/\/tags\/[^\/]+\/works/)) {
            addPersonalWorksToTagPage();
        }

        addPersonalTagsButton();
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
