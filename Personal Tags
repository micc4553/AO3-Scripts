// ==UserScript==
// @name         AO3 Personal Tags
// @version      1.2.0
// @description  Add personal tags to AO3 works with customizable links
// @match        https://archiveofourown.org/*
// @icon         https://archiveofourown.org/favicon.ico
// @updateURL    https://raw.githubusercontent.com/micc4553/AO3-Scripts/refs/heads/main/Personal%20Tags
// @downloadURL  https://raw.githubusercontent.com/micc4553/AO3-Scripts/refs/heads/main/Personal%20Tags
// ==/UserScript==

(function() {
    'use strict';

    // Shared storage keys
    const KEYS = {
        PERSONAL_TAGS: "ao3_personal_tags",
        TAG_LOOKUP: "ao3_tag_lookup",
        TAG_LINKS: "ao3_tag_links" // New key for custom links
    };

    function isValidWorkId(id) {
        if (!id || typeof id !== "string") return false;
        if (id.includes('null') || id.includes('undefined') || id.includes('NaN')) return false;
        if (id.trim() === '' || id.length > 8) return false;
        return /^\d+$/.test(id);
    }

    // Storage functions
    function getPersonalTags(workId) {
        const tags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
        return tags[workId] || [];
    }

    function savePersonalTags(workId, tags) {
        if (!isValidWorkId(workId)) return;
        const allTags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
        allTags[workId] = tags;
        localStorage.setItem(KEYS.PERSONAL_TAGS, JSON.stringify(allTags));
    }

    function getTagLookup() {
        return JSON.parse(localStorage.getItem(KEYS.TAG_LOOKUP) || '{}');
    }

    function saveTagLookup(tagLookup) {
        localStorage.setItem(KEYS.TAG_LOOKUP, JSON.stringify(tagLookup));
    }

    // New functions for custom tag links
    function getTagLinks() {
        return JSON.parse(localStorage.getItem(KEYS.TAG_LINKS) || '{}');
    }

    function saveTagLinks(tagLinks) {
        localStorage.setItem(KEYS.TAG_LINKS, JSON.stringify(tagLinks));
    }

    function getTagLink(tag) {
        const normalizedTag = normalizeTag(tag);
        const tagLinks = getTagLinks();
        return tagLinks[normalizedTag] || `https://archiveofourown.org/tags/${encodeURIComponent(tag)}/works`;
    }

    function setTagLink(tag, link) {
        const normalizedTag = normalizeTag(tag);
        const tagLinks = getTagLinks();
        tagLinks[normalizedTag] = link;
        saveTagLinks(tagLinks);
    }

    function normalizeTag(tag) {
        // Normalize tags to lowercase for consistent storage
        return tag.toLowerCase().trim();
    }

    function capitalizeTag(tag) {
        // Capitalize first letter of each word for display
        return tag.split(' ').map(function(word) {
            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
        }).join(' ');
    }

    function addWorkToTag(tag, workInfo) {
        const normalizedTag = normalizeTag(tag);
        const tagLookup = getTagLookup();
        if (!tagLookup[normalizedTag]) {
            tagLookup[normalizedTag] = {};
        }
        tagLookup[normalizedTag][workInfo.id] = {
            title: workInfo.title,
            author: workInfo.author,
            summary: workInfo.summary || '',
            originalTag: tag // Store original for display
        };
        saveTagLookup(tagLookup);
    }

    function removeWorkFromTag(tag, workId) {
        const normalizedTag = normalizeTag(tag);
        const tagLookup = getTagLookup();
        if (tagLookup[normalizedTag]) {
            delete tagLookup[normalizedTag][workId];
            if (Object.keys(tagLookup[normalizedTag]).length === 0) {
                delete tagLookup[normalizedTag];
            }
            saveTagLookup(tagLookup);
        }
    }

    // Get work info from page
    function getWorkInfo() {
        var match = window.location.pathname.match(/\/works\/(\d+)/);
        const workId = match ? match[1] : null;
        if (!workId || !isValidWorkId(workId)) return null;

        const titleElement = document.querySelector('.title.heading');
        const title = titleElement ? titleElement.textContent.trim() : '';

        const authorElement = document.querySelector('.byline.heading a[rel="author"]');
        const author = authorElement ? authorElement.textContent.trim() : '';

        const summaryElement = document.querySelector('.summary blockquote');
        const summary = summaryElement ? summaryElement.textContent.trim() : '';

        return { id: workId, title: title, author: author, summary: summary };
    }

    // Show link editor modal
    function showLinkEditor(tag, callback) {
        // Remove existing modal if present
        const existingModal = document.querySelector('#link-editor-modal');
        if (existingModal) existingModal.remove();

        // Create modal overlay
        const overlay = document.createElement('div');
        overlay.id = 'link-editor-modal';
        overlay.style.cssText = [
            'position: fixed',
            'top: 0',
            'left: 0',
            'width: 100%',
            'height: 100%',
            'background: rgba(0,0,0,0.5)',
            'display: flex',
            'align-items: center',
            'justify-content: center',
            'z-index: 9999'
        ].join('; ');

        // Modal container
        const modal = document.createElement('div');
        modal.style.cssText = [
            'background: #232136CC',
            'color: #FFF',
            'padding: 20px',
            'border: 1.5px solid #999',
            'border-radius: 6px',
            'max-width: 500px',
            'width: 90%',
            'box-shadow: 0 0 10px rgba(0,0,0,0.5)',
            'font-family: sans-serif'
        ].join('; ');

        // Prevent clicks inside the modal from closing it
        modal.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        // Header
        const header = document.createElement('h3');
        header.style.cssText = 'margin: 0 0 15px 0; font-size: 1.1em;';
        header.textContent = 'Edit Link for "' + tag + '"';
        modal.appendChild(header);

        // Input
        const input = document.createElement('input');
        input.type = 'url';
        input.value = getTagLink(tag);
        input.placeholder = 'Enter URL...';
        input.style.cssText = [
            'width: 100%',
            'padding: 8px',
            'margin-bottom: 15px',
            'border: 1px solid #999',
            'border-radius: 3px',
            'background: #2A273F',
            'color: #FFF',
            'box-sizing: border-box'
        ].join('; ');
        modal.appendChild(input);

        // Buttons container
        const buttonsContainer = document.createElement('div');
        buttonsContainer.style.cssText = 'display: flex; gap: 10px; justify-content: flex-end;';
        modal.appendChild(buttonsContainer);

        // Save button
        const saveButton = document.createElement('button');
        saveButton.textContent = 'Save';
        saveButton.style.cssText = [
            'padding: 6px 12px',
            'border: none',
            'border-radius: 3px',
            'background: #46446C',
            'color: #FFF',
            'cursor: pointer'
        ].join('; ');
        saveButton.addEventListener('click', function() {
            const newLink = input.value.trim();
            if (newLink) {
                setTagLink(tag, newLink);
                if (callback) callback();
            }
            overlay.remove();
        });
        buttonsContainer.appendChild(saveButton);

        // Cancel button
        const cancelButton = document.createElement('button');
        cancelButton.textContent = 'Cancel';
        cancelButton.style.cssText = [
            'padding: 6px 12px',
            'border: 1px solid #999',
            'border-radius: 3px',
            'background: transparent',
            'color: #FFF',
            'cursor: pointer'
        ].join('; ');
        cancelButton.addEventListener('click', function() {
            overlay.remove();
        });
        buttonsContainer.appendChild(cancelButton);

        // Reset button
        const resetButton = document.createElement('button');
        resetButton.textContent = 'Reset to Default';
        resetButton.style.cssText = [
            'padding: 6px 12px',
            'border: 1px solid #999',
            'border-radius: 3px',
            'background: transparent',
            'color: #FFF',
            'cursor: pointer'
        ].join('; ');
        resetButton.addEventListener('click', function() {
            const defaultLink = 'https://archiveofourown.org/tags/' + encodeURIComponent(tag) + '/works';
            input.value = defaultLink;
        });
        buttonsContainer.appendChild(resetButton);

        overlay.appendChild(modal);

        // Close on overlay click
        overlay.addEventListener('click', function() {
            overlay.remove();
        });

        // Handle Enter key
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                saveButton.click();
            }
        });

        // Add to body and focus
        document.body.appendChild(overlay);
        input.focus();
        input.select();
    }

    // Create tag manager UI
    function createTagManager(workInfo) {
        const container = document.createElement('div');
        container.classList.add('personal-tags-container');
        container.style.cssText = [
            'margin: 15px 0',
            'padding: 10px',
            'border: 1.5px solid #999',
            'border-radius: 5px',
            'position: relative',
            'max-width: 580px',
            'margin-left: auto',
            'margin-right: auto'
        ].join('; ');

        // Header
        const header = document.createElement('div');
        header.style.cssText = 'font-weight: bold; margin-bottom: 10px; border-bottom: 1px solid #ccc; padding-bottom: 8px;';
        header.textContent = '📌 Personal Tags';
        container.appendChild(header);

        // Tags display
        const tagsDisplay = document.createElement('div');
        tagsDisplay.style.cssText = 'margin: 10px 0;';
        container.appendChild(tagsDisplay);

        // Input container
        const inputContainer = document.createElement('div');
        inputContainer.style.cssText = 'display: flex; gap: 5px; margin-top: 10px;';
        container.appendChild(inputContainer);

        // Tag input
        const tagInput = document.createElement('input');
        tagInput.type = 'text';
        tagInput.placeholder = 'Add tag...';
        tagInput.style.cssText = 'flex: 1; padding: 5px; border: 1px solid #ccc; border-radius: 3px;';
        inputContainer.appendChild(tagInput);

        // Add button
        const addButton = document.createElement('button');
        addButton.textContent = 'Add Tag';
        addButton.style.cssText = [
            'padding: 5px 10px',
            'border: none',
            'border-radius: 3px',
            'cursor: pointer'
        ].join('; ');
        inputContainer.appendChild(addButton);

        // Suggestion box
        const suggestionBox = document.createElement('div');
        suggestionBox.style.cssText = [
            'position: absolute',
            'top: 100%',
            'left: 0',
            'width: 100%',
            'background: #2A273F',
            'border: 1px solid #999',
            'border-radius: 3px',
            'max-height: 150px',
            'overflow-y: auto',
            'z-index: 1000',
            'display: none'
        ].join('; ');
        container.appendChild(suggestionBox);

        // Helper: get all used tags
        function getAllUsedTags() {
            const allTags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
            const tagsSet = new Set();
            Object.values(allTags).forEach(function(workTags) {
                workTags.forEach(function(tag) {
                    tagsSet.add(tag);
                });
            });
            return Array.from(tagsSet).sort();
        }

        // Display existing tags
        function updateTagsDisplay() {
            const tags = getPersonalTags(workInfo.id);
            if (!tags.length) {
                tagsDisplay.innerHTML = '<em style="color: #999;">No personal tags yet</em>';
                return;
            }

            tagsDisplay.innerHTML = tags.map(function(tag) {
                return '<span style="display: inline-block; margin: 2px; padding: 3px 8px; border: 1px solid #999; border-radius: 3px; font-size: 0.9em; background-color: #2A273F;">' +
                    tag +
                    '<button data-tag="' + tag + '" style="margin-left: 5px; background: none; border: none; cursor: pointer; font-weight: bold;" title="Remove tag">×</button>' +
                '</span>';
            }).join('');

            // Add delete functionality
            tagsDisplay.querySelectorAll('button').forEach(function(btn) {
                btn.addEventListener('click', function() {
                    const tagToDelete = btn.dataset.tag;
                    const currentTags = getPersonalTags(workInfo.id);
                    const newTags = currentTags.filter(function(t) {
                        return t !== tagToDelete;
                    });
                    savePersonalTags(workInfo.id, newTags);
                    removeWorkFromTag(tagToDelete, workInfo.id);
                    updateTagsDisplay();
                });
            });
        }

        // Add tag function
        function addTag() {
            const newTag = tagInput.value.trim();
            if (!newTag) return;

            const currentTags = getPersonalTags(workInfo.id);
            if (!currentTags.includes(newTag)) {
                currentTags.push(newTag);
                savePersonalTags(workInfo.id, currentTags);
                addWorkToTag(newTag, workInfo);
            }

            tagInput.value = '';
            updateTagsDisplay();
            suggestionBox.style.display = 'none';
        }

        // Add tag button click
        addButton.addEventListener('click', addTag);

        // Enter key support for adding tags
        tagInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                const suggestions = suggestionBox.querySelectorAll('.suggestion-item');
                if (selectedIndex >= 0 && suggestions[selectedIndex]) {
                    suggestions[selectedIndex].click();
                } else {
                    addTag();
                }
            }
        });

        // Autocomplete suggestions with keyboard navigation
        var selectedIndex = -1;

        tagInput.addEventListener('input', function() {
            const query = tagInput.value.toLowerCase();
            const usedTags = getAllUsedTags().filter(function(t) {
                return t.toLowerCase().startsWith(query) && t.toLowerCase() !== query;
            });
            selectedIndex = -1;

            if (query && usedTags.length) {
                suggestionBox.innerHTML = '';
                usedTags.forEach(function(tag, index) {
                    const item = document.createElement('div');
                    item.textContent = tag;
                    item.className = 'suggestion-item';
                    item.dataset.index = index;
                    item.style.cssText = 'padding: 5px 10px; cursor: pointer;';

                    item.addEventListener('mouseover', function() {
                        // Clear previous selection
                        suggestionBox.querySelectorAll('.suggestion-item').forEach(function(el) {
                            el.style.background = '#2A273F';
                        });
                        // Highlight hovered item
                        item.style.background = '#46446C';
                        selectedIndex = index;
                    });

                    item.addEventListener('mouseleave', function() {
                        item.style.background = '#2A273F';
                        selectedIndex = -1;
                    });

                    item.addEventListener('click', function() {
                        // Add the tag directly
                        const currentTags = getPersonalTags(workInfo.id);
                        if (!currentTags.includes(tag)) {
                            currentTags.push(tag);
                            savePersonalTags(workInfo.id, currentTags);
                            addWorkToTag(tag, workInfo);
                            updateTagsDisplay();
                        }

                        // Clear input and hide suggestions
                        tagInput.value = '';
                        suggestionBox.style.display = 'none';
                        selectedIndex = -1;
                        tagInput.focus();
                    });
                    suggestionBox.appendChild(item);
                });
                suggestionBox.style.display = 'block';
            } else {
                suggestionBox.style.display = 'none';
                selectedIndex = -1;
            }
        });

        // Add keyboard navigation
        tagInput.addEventListener('keydown', function(e) {
            const suggestions = suggestionBox.querySelectorAll('.suggestion-item');

            if (suggestions.length === 0) return;

            switch(e.key) {
                case 'ArrowDown':
                    e.preventDefault();
                    selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
                    updateSelection(suggestions);
                    break;

                case 'ArrowUp':
                    e.preventDefault();
                    selectedIndex = Math.max(selectedIndex - 1, -1);
                    updateSelection(suggestions);
                    break;

                case 'Escape':
                    suggestionBox.style.display = 'none';
                    selectedIndex = -1;
                    break;
            }
        });

        function updateSelection(suggestions) {
            suggestions.forEach(function(item, index) {
                if (index === selectedIndex) {
                    item.style.background = '#46446C';
                } else {
                    item.style.background = '#2A273F';
                }
            });
        }

        tagInput.addEventListener('blur', function() {
            setTimeout(function() {
                suggestionBox.style.display = 'none';
                selectedIndex = -1;
            }, 100);
        });

        updateTagsDisplay();
        return container;
    }

    // Add personal tags to work page
    function addTagsToWorkPage() {
        const workInfo = getWorkInfo();
        if (!workInfo) return;

        const workMeta = document.querySelector('.work.meta') || document.querySelector('dl.work.meta.group');
        if (!workMeta) return;

        const tagManager = createTagManager(workInfo);
        workMeta.parentElement.insertBefore(tagManager, workMeta.nextSibling);
    }

    // Add personal works to tag listing pages
    function addPersonalWorksToTagPage() {
        try {
            var match = window.location.pathname.match(/\/tags\/([^\/]+)/);
            const currentTag = match ? decodeURIComponent(match[1]) : '';
            if (!currentTag) return;

            const tagLookup = getTagLookup();
            const normalizedCurrentTag = normalizeTag(currentTag.replace(/%20/g, ' ').replace(/_/g, ' '));
            const personalWorks = tagLookup[normalizedCurrentTag];

            if (!personalWorks || Object.keys(personalWorks).length === 0) {
                return;
            }

            setTimeout(function() {
                const worksList = document.querySelector('ol.work.index.group') ||
                                 document.querySelector('#main ol.index.group') ||
                                 document.querySelector('#main .index.group') ||
                                 document.querySelector('ol.work.index');

                if (!worksList) return;
                if (document.querySelector('#personal-tags-section')) return;

                const personalSection = document.createElement('div');
                personalSection.id = 'personal-tags-section';
                personalSection.style.cssText = [
                    'margin: 15px 0',
                    'padding: 5px',
                    'border: 1px solid',
                    'border-radius: 5px',
                    'overflow: hidden'
                ].join('; ');

                const sectionHeader = document.createElement('h4');
                sectionHeader.style.cssText = [
                    'margin: 0',
                    'padding: 10px',
                    'cursor: pointer',
                    'display: flex',
                    'justify-content: space-between',
                    'align-items: center'
                ].join('; ');

                const headerText = document.createElement('span');
                headerText.textContent = '📌 Your Personal "' + capitalizeTag(currentTag.replace(/%20/g, ' ').replace(/_/g, ' ')) + '" Tags';

                const toggleIndicator = document.createElement('span');
                toggleIndicator.textContent = '▼';
                toggleIndicator.style.cssText = [
                    'font-size: 0.8em',
                    'transition: transform 0.2s',
                    'transform: rotate(-90deg)'
                ].join('; ');

                sectionHeader.appendChild(headerText);
                sectionHeader.appendChild(toggleIndicator);

                const contentContainer = document.createElement('div');
                contentContainer.style.cssText = [
                    'padding: 0 10px',
                    'max-height: 0',
                    'overflow: hidden',
                    'transition: max-height 0.3s ease, padding 0.3s ease'
                ].join('; ');

                personalSection.appendChild(sectionHeader);
                personalSection.appendChild(contentContainer);

                Object.keys(personalWorks).forEach(function(workId) {
                    const info = personalWorks[workId];
                    const workItem = document.createElement('div');
                    workItem.style.cssText = [
                        'margin: 10px 0',
                        'padding: 8px',
                        'border-left: 3px solid'
                    ].join('; ');

                    workItem.innerHTML = '<h4 style="margin: 0 0 5px 0;"><a href="/works/' + workId + '">' + info.title + '</a></h4>' +
                        '<p style="margin: 0; color: #999; font-size: 0.9em;">by ' + info.author + '</p>' +
                        (info.summary ? '<p style="margin: 5px 0 0 0; font-size: 0.85em;">' + info.summary + '</p>' : '');
                    contentContainer.appendChild(workItem);
                });

                var isExpanded = false;
                sectionHeader.addEventListener('click', function() {
                    if (isExpanded) {
                        contentContainer.style.maxHeight = '0';
                        contentContainer.style.padding = '0 15px';
                        toggleIndicator.style.transform = 'rotate(-90deg)';
                        isExpanded = false;
                    } else {
                        contentContainer.style.maxHeight = contentContainer.scrollHeight + 'px';
                        contentContainer.style.padding = '15px';
                        toggleIndicator.style.transform = 'rotate(0deg)';
                        isExpanded = true;
                    }
                });

                worksList.parentElement.insertBefore(personalSection, worksList);
            }, 500);
        } catch (error) {
            console.log('Error adding personal works to tag page:', error);
        }
    }

    // Show personal tags modal
    function showPersonalTagsModal() {
        const allTags = JSON.parse(localStorage.getItem(KEYS.PERSONAL_TAGS) || '{}');
        const tagsSet = new Set();
        Object.values(allTags).forEach(function(workTags) {
            workTags.forEach(function(tag) {
                tagsSet.add(tag);
            });
        });
        const sortedTags = Array.from(tagsSet).sort();

        if (sortedTags.length === 0) {
            alert('No personal tags found.');
            return;
        }

        const existingModal = document.querySelector('#personal-tags-modal');
        if (existingModal) existingModal.remove();

        const overlay = document.createElement('div');
        overlay.id = 'personal-tags-modal';
        overlay.style.cssText = [
            'position: fixed',
            'top: 0',
            'left: 0',
            'width: 100%',
            'height: 100%',
            'background: rgba(0,0,0,0.5)',
            'display: flex',
            'align-items: center',
            'justify-content: center',
            'z-index: 9999'
        ].join('; ');

        overlay.addEventListener('click', function() {
            overlay.remove();
        });

        const modal = document.createElement('div');
        modal.style.cssText = [
            'background: #232136CC',
            'color: #FFF',
            'padding: 20px',
            'border: 1.5px solid #999',
            'border-radius: 6px',
            'max-width: 600px',
            'width: 90%',
            'max-height: 80%',
            'overflow-y: auto',
            'box-shadow: 0 0 10px rgba(0,0,0,0.5)',
            'position: relative',
            'font-family: sans-serif'
        ].join('; ');

        modal.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        overlay.appendChild(modal);

        const header = document.createElement('div');
        header.style.cssText = [
            'font-weight: bold',
            'font-size: 1.2em',
            'margin-bottom: 15px',
            'border-bottom: 1px solid #555',
            'padding-bottom: 8px'
        ].join('; ');
        header.textContent = '📌 Your Personal Tags';
        modal.appendChild(header);

        const content = document.createElement('div');
        content.style.cssText = 'display: flex; flex-wrap: wrap; gap: 8px; margin-top: 10px;';

        sortedTags.forEach(function(tag) {
            const tagContainer = document.createElement('div');
            tagContainer.style.cssText = [
                'display: inline-flex',
                'align-items: center',
                'padding: 4px 8px',
                'background: #44415a40',
                'border-radius: 4px',
                'gap: 6px',
                'transition: background-color 0.2s'
            ].join('; ');

            const tagEl = document.createElement('a');
            tagEl.textContent = tag;
            tagEl.href = getTagLink(tag);
            tagEl.target = '_blank';
            tagEl.style.cssText = [
                'cursor: pointer',
                'font-size: 0.95em',
                'text-decoration: none',
                'color: inherit',
                'transition: color 0.2s'
            ].join('; ');

            const editButton = document.createElement('button');
            editButton.innerHTML = '⚙️';
            editButton.title = 'Edit custom link for "' + tag + '"';
            editButton.style.cssText = [
                'background: none',
                'border: none',
                'color: #bbb',
                'cursor: pointer',
                'font-size: 12px',
                'padding: 2px',
                'line-height: 1',
                'transition: all 0.2s'
            ].join('; ');

            editButton.addEventListener('mouseenter', function() {
                editButton.style.color = '#fff';
                editButton.style.transform = 'scale(1.1)';
            });

            editButton.addEventListener('mouseleave', function() {
                editButton.style.color = '#bbb';
                editButton.style.transform = 'scale(1)';
            });

            editButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                showLinkEditor(tag, function() {
                    // Refresh the tag link
                    tagEl.href = getTagLink(tag);
                });
            });

            tagContainer.appendChild(tagEl);
            tagContainer.appendChild(editButton);

            tagContainer.addEventListener('mouseenter', function() {
                tagContainer.style.backgroundColor = '#232136CC';
            });

            tagContainer.addEventListener('mouseleave', function() {
                tagContainer.style.backgroundColor = '#44415a40';
            });

            content.appendChild(tagContainer);
        });
        modal.appendChild(content);

        document.body.appendChild(overlay);
    }

    // Add navigation button
    function addPersonalTagsButton() {
        const nav = document.querySelector("ul.primary.navigation.actions") ||
                   document.querySelector("ul.primary.navigation") ||
                   document.querySelector("nav ul");

        if (!nav) return;
        if (document.querySelector("#personal-tags-btn")) return;

        const personalTagsLi = document.createElement("li");
        personalTagsLi.innerHTML = '<a href="#" id="personal-tags-btn">Personal Tags</a>';
        nav.appendChild(personalTagsLi);

        personalTagsLi.querySelector("a").addEventListener("click", function(e) {
            e.preventDefault();
            showPersonalTagsModal();
        });
    }

    // Initialize based on page type
    function init() {
        const path = window.location.pathname;

        if (path.match(/\/works\/\d+/)) {
            addTagsToWorkPage();
        } else if (path.match(/\/tags\/[^\/]+\/works/)) {
            addPersonalWorksToTagPage();
        }

        addPersonalTagsButton();
    }

    // Wait for page to load
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
